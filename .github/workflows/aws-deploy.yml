name: Deploy ML Project to AWS ECS

on:
  push:
    branches: [ main ]  # Triggers on main branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to AWS'
        required: true
        default: 'aws'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ml-project
  ECS_SERVICE: ml-project-service
  ECS_CLUSTER: ml-project-cluster
  ECS_TASK_DEFINITION: ml-project-task

jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy Docker image to AWS ECS  
      run: |
        # Update ECS service with new Docker image
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} 